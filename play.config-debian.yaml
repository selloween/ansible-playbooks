---
- name: configure debian
  hosts: all
  become: yes
  vars:
    virt_item: "lxc"
    virt_type: "{{ ansible_virtualization_tech_guest }}"
  tasks:
    
    - name: debug virtualization tech
      debug:
        msg: "{{ virt_type }}"
    
    - name: create ansible user
      user:
        name: ansible
        shell: /bin/bash
        groups: sudo
        append: yes

    - name: copy public key
      authorized_key:
        user: ansible
        state: present
        key: "{{ lookup('file', '/home/ansible/.ssh/id_rsa.pub')}}"

    - name: allow passwordless sudo
      copy:
        content: "ansible ALL=(ALL) NOPASSWD: ALL"
        dest: /etc/sudoers.d/ansible

    - name: update all packages to their latest version
      apt:
        name: "*"
        state: latest
        update_cache: yes
        autoclean: yes
        autoremove: yes

    - name: install essential packages
      apt:
        pkg:
          - sudo
          - htop
          - ncdu
          - vim
          - git
          - dnsutils
          - net-tools
          - tmux
        state: latest

    - name: install essential packages
      apt:
        pkg:
          - ufw
          - fail2ban
        state: latest
      when: virt_item not in virt_type

    - name: configure ufw
      when: virt_item not in virt_type
      block:
        
        - name: configure ufw defaults
          ufw:
            direction: "{{ item.direction }}"
            policy: "{{ item.policy }}"
            logging: on
          with_items: 
            - { direction: 'incoming', policy: 'deny' }
            - { direction: 'outgoing', policy: 'allow' }

        - name: configure ufw rules
          ufw:
            rule: "{{ item.rule }}"
            port: "{{ item.port }}"
            proto: "{{ item.proto }}"
          with_items:
            - { rule: 'limit', port: '{{ ssh_port | default("22") }}', proto: 'tcp' }
            - { rule: 'allow', port: '80', proto: 'tcp' }
            - { rule: 'allow', port: '443', proto: 'tcp' }

        - name: enable ufw
          ufw:
            state: enabled

        - name: start ufw
          systemd:
            name: ufw
            state: started
